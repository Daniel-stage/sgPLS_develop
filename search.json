[{"path":"https://daniel-stage.github.io/sgPLS_develop/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Benoit Liquet. Maintainer.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Liquet B, de Micheaux PL, Broc C (2023). sgPLSdevelop: Sparse Group Partial Least Square Methods. doi:10.32614/CRAN.package.sgPLSdevelop, R package version 1.8, https://CRAN.R-project.org/package=sgPLSdevelop.","code":"@Manual{,   title = {sgPLSdevelop: Sparse Group Partial Least Square Methods},   author = {Benoit Liquet and Pierre Lafaye {de Micheaux} and Camilo Broc},   year = {2023},   note = {R package version 1.8},   url = {https://CRAN.R-project.org/package=sgPLSdevelop},   doi = {10.32614/CRAN.package.sgPLSdevelop}, }"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/PLS.html","id":null,"dir":"Reference","previous_headings":"","what":"Partial Least Squares (PLS) — PLS","title":"Partial Least Squares (PLS) — PLS","text":"function performing partial least squares (OLS) method two data sets columns rows. PLS approach therefore useful data sets OLS regression possible.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/PLS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partial Least Squares (PLS) — PLS","text":"","code":"PLS(X, Y, ncomp, mode = \"regression\",scale=TRUE)"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/PLS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partial Least Squares (PLS) — PLS","text":"X numeric matrix predictors. Y numeric vector matrix responses (multi-response models). ncomp number components include model (see Details). mode character string. type algorithm use, (partially) matching     one \"regression\" \"canonical\". See Details. scale logical indicating orignal data set need scaled. default scale=TRUE","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/PLS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Partial Least Squares (PLS) — PLS","text":"PLS function fits PLS models \\(1, \\ldots ,\\)ncomp components. Multi-response models fully supported. type algorithm use specified mode argument. Two PLS algorithms available: PLS regression (\"regression\") PLS canonical analysis (\"canonical\") (see References).","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/PLS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partial Least Squares (PLS) — PLS","text":"PLS returns object class \"PLS\", list contains following components:  X centered standardized original predictor matrix. Y centered standardized original response vector matrix. ncomp number components included model. mode algorithm used fit model. mat.c matrix coefficients used internally predict. variates list containing variates. loadings list containing estimated loadings \\(X\\) \t\\(Y\\) variates. names list containing names used individuals variables.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/PLS.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Partial Least Squares (PLS) — PLS","text":"Liquet Benoit, Lafaye de Micheaux Pierre, Hejblum Boris, Thiebaut Rodolphe. Group sparse group partial least square approaches applied genomics context. bioinformatics","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/PLS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Partial Least Squares (PLS) — PLS","text":"Daniel FLORES.","code":""},{"path":[]},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/PLS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Partial Least Squares (PLS) — PLS","text":"","code":"# Simulation of datasets X and Y with group variables  library(sgPLSdevelop)  ## First example   ### paramaters n <- 100 sigma.gamma <- 1 sigma.e <- 1.5 p <- 400 q <- 500  theta.x1 <- c(rep(1, 15), rep(0, 5), rep(-1, 15), rep(0, 5), rep(1.5,15),                rep(0, 5), rep(-1.5, 15), rep(0, 325)) theta.x2 <- c(rep(0, 320), rep(1, 15), rep(0, 5), rep(-1, 15), rep(0, 5),               rep(1.5, 15), rep(0, 5), rep(-1.5, 15), rep(0, 5))  theta.y1 <- c(rep(1, 15), rep(0, 5), rep(-1, 15), rep(0, 5), rep(1.5, 15),               rep(0, 5), rep(-1.5, 15), rep(0, 425)) theta.y2 <- c(rep(0, 420), rep(1, 15), rep(0, 5), rep(-1, 15), rep(0, 5),               rep(1.5, 15), rep(0, 5), rep(-1.5, 15), rep(0, 5))                              ### covariance matrices Sigmax <- matrix(0, nrow = p, ncol = p) diag(Sigmax) <- sigma.e ^ 2 Sigmay <- matrix(0,nrow = q, ncol = q) diag(Sigmay) <- sigma.e ^ 2  set.seed(125)  gam1 <- rnorm(n) gam2 <- rnorm(n)  GAM <- matrix(c(gam1, gam2), ncol = 2, byrow = FALSE) Thetax <- matrix(c(theta.x1, theta.x2), nrow = 2, byrow = TRUE) Thetay <- matrix(c(theta.y1, theta.y2), nrow = 2, byrow = TRUE) E1 <- rmvnorm(n, mean = rep(0, p), sigma = Sigmax, method = \"svd\") E2 <- rmvnorm(n, mean = rep(0, q), sigma = Sigmay, method = \"svd\")    X <- GAM %*% Thetax + E1                                                 Y <- GAM %*% Thetay + E2  ### PLS model model.PLS <- PLS(X, Y, ncomp = 2, mode = \"regression\")   ## Second example  train <- 1:40 test <- 41:50 n.test <- length(test)  d <- data.create(n = 50, p = 10, q = 2, list = TRUE)  X <- d$X[train,] Y <- d$Y[train,] X.test <- d$X[test,] Y.test <- d$Y[test,]  ncompmax <- 10 model.pls <- PLS(X = X, Y = Y, ncomp = ncompmax, mode = \"regression\") pred <- predict.PLS(model.pls, newdata = X.test)$predict"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/PLSda.html","id":null,"dir":"Reference","previous_headings":"","what":"Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — PLSda","title":"Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — PLSda","text":"Function perform Partial Least Squares classify samples (supervised analysis).","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/PLSda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — PLSda","text":"","code":"PLSda(X, Y, ncomp = 2)"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/PLSda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — PLSda","text":"X numeric matrix predictors. NAs allowed. Y factor class vector discrete outcome. ncomp number components include model (see Details).","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/PLSda.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — PLSda","text":"PLSda function fit PLS models \\(1, \\ldots ,\\)ncomp components factor class vector Y. appropriate indicator (dummy) matrix created.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/PLSda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — PLSda","text":"PLSda returns object class \"PLSda\", list contains following components:  X centered standardized original predictor matrix. Y centered standardized indicator response vector matrix. ind.mat indicator matrix. ncomp number components included model. mat.c matrix coefficients used internally predict. variates list containing variates. loadings list containing estimated loadings X \tY variates. names list containing names used individuals variables.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/PLSda.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — PLSda","text":"Benoit Liquet Pierre Lafaye de Micheaux.","code":""},{"path":[]},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/PLSda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — PLSda","text":"","code":"library(sgPLSdevelop)  ncompmax <- 5 d <- data.cl.create(classes = 4, n = 30, list = TRUE) X <- d$X Y <- d$Y  modele <- PLSda(X = X, Y = Y, ncomp = ncompmax)"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/data.create.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset simulation — data.create","title":"Dataset simulation — data.create","text":"functions allow generate dataset linear dependance \\(Y\\) \\(X\\). data.create used quantitative response data.cl.create used qualitative response.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/data.create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset simulation — data.create","text":"","code":"data.create(n = 40, p = 10, q = 1, seed = NULL, list = TRUE) data.cl.create(n = 40, p = 10, classes = 2, seed = NULL, list = TRUE)"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/data.create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dataset simulation — data.create","text":"n Number dataset rows. p Number \\(X\\) variables. q Number \\(Y\\) variables data.create function. classes Number classes generate data.cl.create function seed Uses set.seed function generate data. list default, returns list including dataframe. argument list set FALSE, dataframe returned.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/data.create.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dataset simulation — data.create","text":"default, population set \\(n=40\\) close actual conditions. case, \\(p<n\\). \\(Y\\) linear combinaison gaussian variable \\(X_j\\) \\(X\\). Indeed, function includes matrix product compute response : \\(Y = XB+E\\) \\(B\\) weight (coefficients) matrix \\(E\\) matrix gaussian noise. \\(B\\) matrix can found list returned function (list = TRUE). data.cl.create function, Y object returned factor class.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/data.create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset simulation — data.create","text":"","code":"library(sgPLSdevelop, warn.conflicts = FALSE, verbose = FALSE, quietly = TRUE)  # data.create data <- data.create(n = 20, p = 5, q = 2, list = TRUE) X <- data$X Y <- data$Y  # data.cl.create data.cl <- data.cl.create(n = 20, p = 5, classes = 3, list = TRUE) X <- data.cl$X Y <- data.cl$Y"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/gPLS.html","id":null,"dir":"Reference","previous_headings":"","what":"Group Partial Least Squares (gPLS) — gPLS","title":"Group Partial Least Squares (gPLS) — gPLS","text":"Function perform group Partial Least Squares (gPLS)   context two datasets divided groups   variables. gPLS approach aims select groups   variables one dataset linearly related groups variables second dataset.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/gPLS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group Partial Least Squares (gPLS) — gPLS","text":"","code":"gPLS(X, Y, ncomp, mode = \"regression\",      max.iter = 500, tol = 1e-06, keepX,       keepY = NULL, ind.block.x, ind.block.y = NULL,scale=TRUE)"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/gPLS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group Partial Least Squares (gPLS) — gPLS","text":"X numeric matrix predictors. Y numeric vector matrix responses (multi-response models). ncomp number components include model (see Details). mode character string. type algorithm use, (partially) matching     one \"regression\" \"canonical\". See Details. max.iter integer, maximum number iterations. tol positive real, tolerance used iterative algorithm. keepX numeric vector length ncomp, number variables     keep \\(X\\)-loadings. default variables kept model. keepY numeric vector length ncomp, number variables     keep \\(Y\\)-loadings. default variables kept model. ind.block.x vector integers describing grouping \\(X\\)-variables. (see example Details section) ind.block.y vector consecutive integers describing grouping \\(Y\\)-variables (see example Details section) scale logical indicating orignal data set need scaled. default scale=TRUE","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/gPLS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Group Partial Least Squares (gPLS) — gPLS","text":"gPLS function fits gPLS models \\(1, \\ldots ,\\)ncomp components. Multi-response models fully supported. type algorithm use specified mode argument. Two gPLS algorithms available: gPLS regression (\"regression\") gPLS canonical analysis (\"canonical\") (see References). ind.block.x <- c(3,10,15) means \\(X\\) structured 4 groups: X1 X3; X4 X10, X11 X15 X16 X\\(p\\) \\(p\\) number variables \\(X\\) matrix.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/gPLS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group Partial Least Squares (gPLS) — gPLS","text":"gPLS returns object class \"gPLS\", list contains following components:  X centered standardized original predictor matrix. Y centered standardized original response vector matrix. ncomp number components included model. mode algorithm used fit model. keepX number \\(X\\) variables kept model component. keepY number \\(Y\\) variables kept model component. mat.c matrix coefficients used internally predict. variates list containing variates. loadings list containing estimated loadings \\(X\\) \t\\(Y\\) variates. names list containing names used individuals variables. tol tolerance used iterative algorithm, used subsequent S3 methods. max.iter maximum number iterations, used subsequent S3 methods. iter vector containing number iterations convergence component. ind.block.x vector integers describing grouping X variables. ind.block.y vector consecutive integers describing grouping Y variables.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/gPLS.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Group Partial Least Squares (gPLS) — gPLS","text":"Liquet Benoit, Lafaye de Micheaux Pierre , Hejblum Boris, Thiebaut Rodolphe. group Sparse Group Partial Least Square approach applied Genomics context. Submitted. Le Cao, K.-., Martin, P.G.P., Robert-Grani\\'e, C. Besse, P. (2009). Sparse canonical methods biological data integration: application cross-platform study. BMC Bioinformatics 10:34. Le Cao, K.-., Rossouw, D., Robert-Grani\\'e, C. Besse, P. (2008). sparse PLS variable selection integrating Omics data. Statistical Applications Genetics Molecular Biology 7, article 35. Shen, H. Huang, J. Z. (2008). Sparse principal component analysis via regularized low rank matrix approximation. Journal Multivariate Analysis 99, 1015-1034. Tenenhaus, M. (1998). La r\\'egression PLS: th\\'eorie et pratique. Paris: Editions Technic. Wold H. (1966). Estimation principal components related models iterative least squares. : Krishnaiah, P. R. (editors), Multivariate Analysis. Academic Press, N.Y., 391-420.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/gPLS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Group Partial Least Squares (gPLS) — gPLS","text":"Benoit Liquet Pierre Lafaye de Micheaux.","code":""},{"path":[]},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/gPLS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group Partial Least Squares (gPLS) — gPLS","text":"","code":"## Simulation of datasets X and Y with group variables n <- 100 sigma.gamma <- 1 sigma.e <- 1.5 p <- 400 q <- 500 theta.x1 <- c(rep(1, 15), rep(0, 5), rep(-1, 15), rep(0, 5), rep(1.5,15),                rep(0, 5), rep(-1.5, 15), rep(0, 325)) theta.x2 <- c(rep(0, 320), rep(1, 15), rep(0, 5), rep(-1, 15), rep(0, 5),               rep(1.5, 15), rep(0, 5), rep(-1.5, 15), rep(0, 5))  theta.y1 <- c(rep(1, 15), rep(0, 5), rep(-1, 15), rep(0, 5), rep(1.5, 15),               rep(0, 5), rep(-1.5, 15), rep(0, 425)) theta.y2 <- c(rep(0, 420), rep(1, 15), rep(0, 5), rep(-1, 15), rep(0, 5),               rep(1.5, 15), rep(0, 5), rep(-1.5, 15), rep(0, 5))                               Sigmax <- matrix(0, nrow = p, ncol = p) diag(Sigmax) <- sigma.e ^ 2 Sigmay <- matrix(0,nrow = q, ncol = q) diag(Sigmay) <- sigma.e ^ 2  set.seed(125)  gam1 <- rnorm(n) gam2 <- rnorm(n)  X <- matrix(c(gam1, gam2), ncol = 2, byrow = FALSE) %*% matrix(c(theta.x1, theta.x2),      nrow = 2, byrow = TRUE) + rmvnorm(n, mean = rep(0, p), sigma =      Sigmax, method = \"svd\") Y <- matrix(c(gam1, gam2), ncol = 2, byrow = FALSE) %*% matrix(c(theta.y1, theta.y2),       nrow = 2, byrow = TRUE) + rmvnorm(n, mean = rep(0, q), sigma =      Sigmay, method = \"svd\")   ind.block.x <- seq(20, 380, 20) ind.block.y <- seq(20, 480, 20) ##   #### gPLS model model.gPLS <- gPLS(X, Y, ncomp = 2, mode = \"regression\", keepX = c(4, 4),       keepY = c(4, 4), ind.block.x = ind.block.x , ind.block.y = ind.block.y)  result.gPLS <- select.sgpls(model.gPLS) result.gPLS$group.size.X #>    size comp1 comp2 #> 1    20    20     0 #> 2    20    20     0 #> 3    20    20     0 #> 4    20    20     0 #> 5    20     0     0 #> 6    20     0     0 #> 7    20     0     0 #> 8    20     0     0 #> 9    20     0     0 #> 10   20     0     0 #> 11   20     0     0 #> 12   20     0     0 #> 13   20     0     0 #> 14   20     0     0 #> 15   20     0     0 #> 16   20     0     0 #> 17   20     0    20 #> 18   20     0    20 #> 19   20     0    20 #> 20   20     0    20 result.gPLS$group.size.Y #>    size comp1 comp2 #> 1    20    20     0 #> 2    20    20     0 #> 3    20    20     0 #> 4    20    20     0 #> 5    20     0     0 #> 6    20     0     0 #> 7    20     0     0 #> 8    20     0     0 #> 9    20     0     0 #> 10   20     0     0 #> 11   20     0     0 #> 12   20     0     0 #> 13   20     0     0 #> 14   20     0     0 #> 15   20     0     0 #> 16   20     0     0 #> 17   20     0     0 #> 18   20     0     0 #> 19   20     0     0 #> 20   20     0     0 #> 21   20     0     0 #> 22   20     0    20 #> 23   20     0    20 #> 24   20     0    20 #> 25   20     0    20"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/gPLSda.html","id":null,"dir":"Reference","previous_headings":"","what":"Group Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — gPLSda","title":"Group Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — gPLSda","text":"Function perform group Partial Least Squares classify samples (supervised analysis) select variables.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/gPLSda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — gPLSda","text":"","code":"gPLSda(X, Y, ncomp = 2, keepX = rep(ncol(X), ncomp),        max.iter = 500, tol = 1e-06, ind.block.x)"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/gPLSda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — gPLSda","text":"X numeric matrix predictors. NAs allowed. Y factor class vector discrete outcome. ncomp number components include model (see Details). keepX numeric vector length ncomp, number variables     keep \\(X\\)-loadings. default variables kept model. max.iter integer, maximum number iterations. tol positive real, tolerance used iterative algorithm. ind.block.x vector integers describing grouping \\(X\\)-variables. (see example Details section)","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/gPLSda.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Group Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — gPLSda","text":"gPLSda function fit gPLS models \\(1, \\ldots ,\\)ncomp components factor class vector Y. appropriate indicator (dummy) matrix created. ind.block.x <- c(3,10,15) means \\(X\\) structured 4 groups: X1 X3; X4 X10, X11 X15 X16 X\\(p\\) \\(p\\) number variables \\(X\\) matrix.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/gPLSda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — gPLSda","text":"sPLSda returns object class \"sPLSda\", list contains following components:  X centered standardized original predictor matrix. Y centered standardized indicator response vector matrix. ind.mat indicator matrix. ncomp number components included model. keepX number \\(X\\) variables kept model component. mat.c matrix coefficients used internally predict. variates list containing variates. loadings list containing estimated loadings X \tY variates. names list containing names used individuals variables. tol tolerance used iterative algorithm, used subsequent S3 methods max.iter maximum number iterations, used subsequent S3 methods iter Number iterations algorthm component ind.block.x vector integers describing grouping X variables.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/gPLSda.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Group Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — gPLSda","text":"Liquet Benoit, Lafaye de Micheaux Pierre , Hejblum Boris, Thiebaut Rodolphe (2016). group Sparse Group Partial Least Square approach applied Genomics context. Bioinformatics. sPLS-DA: Le Cao, K.-., Boitard, S. Besse, P. (2011). Sparse PLS Discriminant Analysis: biologically relevant feature selection graphical displays multiclass problems. BMC Bioinformatics 12:253.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/gPLSda.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Group Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — gPLSda","text":"Benoit Liquet  Pierre Lafaye de Micheaux.","code":""},{"path":[]},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/gPLSda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — gPLSda","text":"","code":"data(simuData) X <- simuData$X Y <- simuData$Y ind.block.x <- seq(100, 900, 100) model <- gPLSda(X, Y, ncomp = 3,ind.block.x=ind.block.x, keepX = c(2, 2, 2)) result.gPLSda <- select.sgpls(model) result.gPLSda$group.size.X #>    size comp1 comp2 comp3 #> 1   100     0   100     0 #> 2   100     0     0   100 #> 3   100     0     0     0 #> 4   100   100     0     0 #> 5   100     0     0     0 #> 6   100     0   100     0 #> 7   100     0     0   100 #> 8   100     0     0     0 #> 9   100   100     0     0 #> 10  100     0     0     0  # perf(model,criterion=\"all\",validation=\"loo\") -> res # res$error.rate"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/msep.PLS.html","id":null,"dir":"Reference","previous_headings":"","what":"PLS function performance assessment using \\(MSEP\\) indicator — msep.PLS","title":"PLS function performance assessment using \\(MSEP\\) indicator — msep.PLS","text":"msep.PLS function allows assess PLS models using\\(MSEP\\) criterion.   function returns list including \\(MSEP\\) values number components.   msep.PLS gives also suggestion number components selection.   plot allows visualize model performance according number components.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/msep.PLS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PLS function performance assessment using \\(MSEP\\) indicator — msep.PLS","text":"","code":"msep.PLS(object, ncomp = object$ncomp, K=nrow(object$X), plot = TRUE)"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/msep.PLS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PLS function performance assessment using \\(MSEP\\) indicator — msep.PLS","text":"object Object class inheriting \"pls\". ncomp number components desired MSEP computing (number components computed model). K number blocks cross-validation (leave-one-default). plot Boolean indicating plot must output ","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/msep.PLS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PLS function performance assessment using \\(MSEP\\) indicator — msep.PLS","text":"leave-one-cross-validation used default. \\(K\\) must value 2 number rows dataset used training model. MSEP defined mean squared error true \\(Y\\) values associated predictions. plot = TRUE, plot displays curve MSEP values.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/msep.PLS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PLS function performance assessment using \\(MSEP\\) indicator — msep.PLS","text":"MSEP.train \\(MSEP\\) training set WITHOUT cross-validation MSEP.train.j \\(MSEP\\) training set variable WITHOUT cross-validation MSEP.cv \\(MSEP\\) model set cross-validation MSEP.cv.j \\(MSEP\\) model set variable cross-validation h.best Indice minimum MSEP.cv","code":""},{"path":[]},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/msep.PLS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PLS function performance assessment using \\(MSEP\\) indicator — msep.PLS","text":"","code":"library(sgPLSdevelop)  ## data and model creation  d <- data.create(p = 10, list = TRUE) n <- nrow(d$X) ncomp.max <- 10 X <- d$X Y <- d$Y model <- PLS(X,Y,ncomp = ncomp.max, mode = \"regression\")  ## using msep.PLS function msep.res <- msep.PLS(model, ncomp = ncomp.max, K = n)  msep.res$MSEP  #> NULL msep.res$h.best #number of components suggestion  #> [1] 5"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/per.variance.html","id":null,"dir":"Reference","previous_headings":"","what":"Percentage of variance of the \\(Y\\) matrix explained by the score-vectors obtained by PLS approaches — per.variance","title":"Percentage of variance of the \\(Y\\) matrix explained by the score-vectors obtained by PLS approaches — per.variance","text":"per.variance function computes percentage variance \\(Y\\) matrix explained score-vectors obtained PLS approaches (sPLS, gPLS sgPLS) regression mode.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/per.variance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Percentage of variance of the \\(Y\\) matrix explained by the score-vectors obtained by PLS approaches — per.variance","text":"","code":"per.variance(object)"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/per.variance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Percentage of variance of the \\(Y\\) matrix explained by the score-vectors obtained by PLS approaches — per.variance","text":"object object class inheriting \"sPLS\", \"gPLS\",    \"sgPLS\". function retrieve key parameters stored object.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/per.variance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Percentage of variance of the \\(Y\\) matrix explained by the score-vectors obtained by PLS approaches — per.variance","text":"per.variance produces list following components: perX Percentage variance \\(Y\\) matrix explained score-vectors. cum.perX cumulative percentage variance \\(Y\\) matrix explained score-vectors.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/per.variance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Percentage of variance of the \\(Y\\) matrix explained by the score-vectors obtained by PLS approaches — per.variance","text":"Benoit Liquet, b.liquet@uq.edu.au,  Pierre Lafaye de Micheaux lafaye@dms.umontreal.ca","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/per.variance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Percentage of variance of the \\(Y\\) matrix explained by the score-vectors obtained by PLS approaches — per.variance","text":"","code":"if (FALSE) { # \\dontrun{   ## Simulation of datasets X and Y with group variables n <- 100 sigma.gamma <- 1 sigma.e <- 1.5 p <- 400 q <- 500 theta.x1 <- c(rep(1, 15), rep(0, 5), rep(-1, 15), rep(0, 5), rep(1.5, 15),               rep(0, 5), rep(-1.5, 15), rep(0, 325)) theta.x2 <- c(rep(0, 320), rep(1, 15), rep(0, 5), rep(-1, 15), rep(0, 5),               rep(1.5, 15), rep(0, 5), rep(-1.5, 15), rep(0, 5))  theta.y1 <- c(rep(1, 15), rep(0, 5), rep(-1, 15), rep(0, 5), rep(1.5, 15),               rep(0, 5), rep(-1.5, 15), rep(0, 425)) theta.y2 <- c(rep(0, 420), rep(1, 15), rep(0, 5), rep(-1, 15), rep(0, 5),               rep(1.5, 15), rep(0, 5), rep(-1.5, 15), rep(0, 5))  Sigmax <- matrix(0, nrow = p, ncol = p) diag(Sigmax) <- sigma.e ^ 2 Sigmay <- matrix(0, nrow = q, ncol = q) diag(Sigmay) <- sigma.e ^ 2  set.seed(125)  gam1 <- rnorm(n) gam2 <- rnorm(n)  X <- matrix(c(gam1, gam2), ncol = 2, byrow = FALSE) %*% matrix(c(theta.x1, theta.x2),      nrow = 2, byrow = TRUE) + rmvnorm(n, mean = rep(0, p), sigma =      Sigmax, method = \"svd\") Y <- matrix(c(gam1, gam2), ncol = 2, byrow = FALSE) %*% matrix(c(theta.y1, theta.y2),       nrow = 2, byrow = TRUE) + rmvnorm(n, mean = rep(0, q), sigma =      Sigmay, method = \"svd\")  ind.block.x <- seq(20, 380, 20) ind.block.y <- seq(20, 480, 20)  #### gPLS model model.sgPLS <- sgPLS(X, Y, ncomp = 2, mode = \"regression\", keepX = c(4, 4),                     keepY = c(4, 4), ind.block.x = ind.block.x,                    ind.block.y = ind.block.y,                    alpha.x = c(0.5, 0.5), alpha.y = c(0.5, 0.5))  result.sgPLS <- select.sgpls(model.sgPLS) result.sgPLS$group.size.X result.sgPLS$group.size.Y  #### gPLS model model.gPLS <- gPLS(X, Y, ncomp = 2, mode = \"regression\", keepX = c(4, 4),       keepY = c(4, 4), ind.block.x = ind.block.x ,ind.block.y = ind.block.y)  result.gPLS <- select.sgpls(model.gPLS) result.gPLS$group.size.X result.gPLS$group.size.Y  per.variance(model.gPLS) per.variance(model.sgPLS)  } # }"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/perf.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute evaluation criteria for PLS, sPLS, PLS-DA and sPLS-DA — perf","title":"Compute evaluation criteria for PLS, sPLS, PLS-DA and sPLS-DA — perf","text":"Function evaluate performance fitted sparse PLS, group PLS, sparse group PLS, sparse PLS-DA, group PLS-DA sparse group PLS-DA models using various criteria.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/perf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute evaluation criteria for PLS, sPLS, PLS-DA and sPLS-DA — perf","text":"","code":"# S3 method for class 'PLS' perf(object,            criterion = c(\"all\", \"MSEP\", \"Q2\"),            validation = c(\"Mfold\", \"loo\"),            folds = 10, progressBar = TRUE, setseed = 1, plot = FALSE, ...)             # S3 method for class 'sPLS' perf(object,            criterion = c(\"all\", \"MSEP\", \"R2\", \"Q2\"),            validation = c(\"Mfold\", \"loo\"),            folds = 10, progressBar = TRUE, setseed = 1, plot = FALSE, ...)            # S3 method for class 'gPLS' perf(object,            criterion = c(\"all\", \"MSEP\", \"R2\", \"Q2\"),            validation = c(\"Mfold\", \"loo\"),            folds = 10, progressBar = TRUE, setseed = 1, plot = FALSE, ...)            # S3 method for class 'sgPLS' perf(object,            criterion = c(\"all\", \"MSEP\", \"R2\", \"Q2\"),            validation = c(\"Mfold\", \"loo\"),            folds = 10, progressBar = TRUE,setseed = 1, ...)            # S3 method for class 'PLSda' perf(object,           method.predict = c(\"all\", \"max.dist\", \"centroids.dist\", \"mahalanobis.dist\"),           validation = c(\"Mfold\", \"loo\"),            folds = 10, progressBar = TRUE, ...)               # S3 method for class 'sPLSda' perf(object,           method.predict = c(\"all\", \"max.dist\", \"centroids.dist\", \"mahalanobis.dist\"),           validation = c(\"Mfold\", \"loo\"),            folds = 10, progressBar = TRUE, ...)    # S3 method for class 'gPLSda' perf(object,           method.predict = c(\"all\", \"max.dist\", \"centroids.dist\", \"mahalanobis.dist\"),           validation = c(\"Mfold\", \"loo\"),            folds = 10, progressBar = TRUE, ...)            # S3 method for class 'sgPLSda' perf(object,           method.predict = c(\"all\", \"max.dist\", \"centroids.dist\", \"mahalanobis.dist\"),           validation = c(\"Mfold\", \"loo\"),            folds = 10, progressBar = TRUE, ...)"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/perf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute evaluation criteria for PLS, sPLS, PLS-DA and sPLS-DA — perf","text":"object Object class inheriting \"sPLS\", \"gPLS\", \"sgPLS\", \"sPLSda\", \"gPLSda\" \"sgPLSda\". function retrieve key parameters stored object. criterion criteria measures calculated (see Details). Can set either \"\", \"MSEP\", \"R2\", \"Q2\". default set \"\". applies object inheriting \"sPLS\", \"gPLS\" \"sgPLS\" method.predict applies object inheriting \"PLSda\", \"gPLSda\" \"sgPLSda\" evaluate classification performance model. subset \"max.dist\", \"centroids.dist\", \"mahalanobis.dist\". Default \"\". See predict. validation Character.  kind (internal) validation use, matching one \"Mfold\"     \"loo\" (see ). Default \"Mfold\". folds folds Mfold cross-validation. See Details. progressBar default set TRUE output progress bar computation. setseed Integer value specify random generator state. ... used moment.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/perf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute evaluation criteria for PLS, sPLS, PLS-DA and sPLS-DA — perf","text":"method perf created Sebastien Dejean, Ignacio Gonzalez, Amrit Singh Kim-Anh Le Cao pls spls models performed mixOmics package. Similar code adapted sPLS, gPLS sgPLS package sgPLS. perf estimates mean squared error prediction (MSEP), \\(R^2\\), \\(Q^2\\) assess predictive performance model using M-fold leave-one-cross-validation. Note classic, regression  invariant modes can applied. validation = \"Mfold\", M-fold cross-validation performed. many folds generate selected specifying number folds folds. folds also can supplied list vectors containing indexes defining fold produced split. validation = \"loo\", leave-one-cross-validation performed. fitted sPLS-DA, gPLS-DA sgPLS-DA models, perf estimates classification error rate using cross-validation. Note perf function retrieve keepX keepY inputs previously run object. sPLS, gPLS, sgPLS, sPLSda, gPLSda sgPLSda functions run several different subsets data (cross-folds) certainly different subset selected features. sPLS, MSEP, \\(R^2\\), \\(Q^2\\) criteria averaged across folds. feature stability measure output user assess often variables selected across folds. sPLS-DA, classification erro rate averaged across folds.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/perf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute evaluation criteria for PLS, sPLS, PLS-DA and sPLS-DA — perf","text":"perf produces list following components: MSEP Mean Square Error Prediction \\(Y\\) variable, applies object inherited \"sPLS\", \"gPLS\" \"sgPLS\". R2 matrix \\(R^2\\) values \\(Y\\)-variables models     \\(1, \\ldots ,\\)ncomp components, applies object inherited \"sPLS\", \"gPLS\" \"sgPLS\". Q2 \\(Y\\) contains one variable, vector \\(Q^2\\) values else list     matrix \\(Q^2\\) values \\(Y\\)-variable. Note specific case sPLS model, better look Q2.total criterion, applies object inherited \"sPLS\", \"gPLS\" \"sgPLS\". Q2.total vector \\(Q^2\\)-total values models \\(1, \\ldots ,\\)ncomp components, applies object inherited \"sPLS\", \"gPLS\" \"sgPLS\". features list features selected across folds ($stable.X $stable.Y) whole data set ($final) keepX keepY parameters input object. error.rate sPLS-DA, gPLS-DA sgPLS-DA models, perf produces matrix classification error rate estimation. dimensions correspond components model prediction method used, respectively. Note error rates reported component include performance model earlier components specified keepX parameters (e.g. error rate reported component 3 keepX = 20 already includes fitted model components 1 2  keepX = 20). advanced usage perf function, see mixOmics package consider using predict function.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/perf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute evaluation criteria for PLS, sPLS, PLS-DA and sPLS-DA — perf","text":"Tenenhaus, M. (1998). La r\\'egression PLS: th\\'eorie et pratique. Paris: Editions Technic. Le Cao, K.-., Rossouw, D., Robert-Grani\\'e, C. Besse, P. (2008). sparse PLS variable selection integrating Omics data. Statistical Applications Genetics Molecular Biology 7, article 35. Mevik, B.-H., Cederkvist, H. R. (2004). Mean Squared Error Prediction (MSEP) Estimates Principal Component Regression (PCR) Partial Least Squares Regression (PLSR). Journal Chemometrics 18(9), 422-429.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/perf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute evaluation criteria for PLS, sPLS, PLS-DA and sPLS-DA — perf","text":"Benoit Liquet Pierre Lafaye de Micheaux","code":""},{"path":[]},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/perf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute evaluation criteria for PLS, sPLS, PLS-DA and sPLS-DA — perf","text":"","code":"## validation for objects of class 'sPLS' (regression) ## Example from mixOmics package  # ---------------------------------------- if (FALSE) { # \\dontrun{ data(liver.toxicity) X <- liver.toxicity$gene Y <- liver.toxicity$clinic   ## validation for objects of class 'spls' (regression) # ---------------------------------------- ncomp <- 7 # first, learn the model on the whole data set model.spls <- sPLS(X, Y, ncomp = ncomp, mode = 'regression',    keepX = c(rep(5, ncomp)), keepY = c(rep(2, ncomp)))   # with leave-one-out cross validation set.seed(45) model.spls.loo.val <- perf(model.spls, validation = \"loo\")  #Q2 total model.spls.loo.val$Q2.total  # R2:we can see how the performance degrades when ncomp increases # results are similar to 5-fold model.spls.loo.val$R2  } # }"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/plot.indiv.html","id":null,"dir":"Reference","previous_headings":"","what":"Population projection on others dimension — plot.indiv","title":"Population projection on others dimension — plot.indiv","text":"function displays scatterplot population (dataset individuals) projected dimensions selected parameters.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/plot.indiv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Population projection on others dimension — plot.indiv","text":"","code":"plot.indiv(object, compX = c(1,2), compY = NULL, ellipse.plsda = TRUE)"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/plot.indiv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Population projection on others dimension — plot.indiv","text":"object Object class inheriting \"sPLS\", \"gPLS\", \"sgPLS\", \"sPLSda\", \"gPLSda\" \"sgPLSda\". function retrieve key parameters stored object. compX X components population projected. compY Y components population projected (available regression). ellipse.plsda Displays ellipses circling point group ellipse.plsda = TRUE (available classification)","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/plot.indiv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Population projection on others dimension — plot.indiv","text":"data gives latentes variables selected parameters (words, point coordinates). graphX scatterplot X selected components. graphY scatterplot Y selected components regression case.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/plot.indiv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Population projection on others dimension — plot.indiv","text":"Daniel FLORES","code":""},{"path":[]},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/plot.indiv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Population projection on others dimension — plot.indiv","text":"","code":"library(sgPLSdevelop)  ncomp.max <- 10  # PLS  data <- data.create(n = 20, p = 5, q = 2) X <- data$X Y <- data$Y model.pls <- PLS(X,Y,ncomp = ncomp.max) pop.model.pls <- plot.indiv(model.pls, compX = c(5,4), compY = c(1,2))  # PLSDA data.cl <- data.cl.create(n = 20, p = 5, classes = 3) X <- data.cl$X Y <- data.cl$Y model.plsda <- PLSda(X,Y,ncomp = ncomp.max) pop.model.plsda <- plot.indiv(model.plsda, compX = c(5,4))"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/plotcim.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots a cluster image mapping of correlations between outcomes and all predictors — plotcim","title":"Plots a cluster image mapping of correlations between outcomes and all predictors — plotcim","text":"plotcim function plots cluster image   mapping correlations outcomes predictors.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/plotcim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots a cluster image mapping of correlations between outcomes and all predictors — plotcim","text":"","code":"plotcim(matX, matY, cexCol = 0.5, cexRow = 1)"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/plotcim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots a cluster image mapping of correlations between outcomes and all predictors — plotcim","text":"matX data frame corresponding predictors. matY data frame corresponding outcomes. cexRow, cexCol positive numbers, used cex.axis row column \taxis labeling. defaults currently use number rows columns, respectively.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/plotcim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plots a cluster image mapping of correlations between outcomes and all predictors — plotcim","text":"used small number predictors (<1,000).","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/plotcim.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plots a cluster image mapping of correlations between outcomes and all predictors — plotcim","text":"Benoit Liquet, b.liquet@uq.edu.au,  Pierre Lafaye de Micheaux lafaye@dms.umontreal.ca","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Method for PLS, sPLS, gPLS, sgPLS, sPLDda, gPLSda, sgPLSda — predict","title":"Predict Method for PLS, sPLS, gPLS, sgPLS, sPLDda, gPLSda, sgPLSda — predict","text":"Predicted values based PLS, sparse PLS, group PLS, sparse group PLS, PLSda, sparse PLSda, group PLSda, sparse group PLSda models. New responses variates predicted using fitted model new matrix observations.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Method for PLS, sPLS, gPLS, sgPLS, sPLDda, gPLSda, sgPLSda — predict","text":"","code":"# S3 method for class 'PLS' predict(object, newdata, ...)  # S3 method for class 'sPLS' predict(object, newdata, ...)  # S3 method for class 'gPLS' predict(object, newdata, ...)  # S3 method for class 'sgPLS' predict(object, newdata, ...)  # S3 method for class 'PLSda' predict(object, newdata, method = c(\"all\", \"max.dist\",          \"centroids.dist\", \"mahalanobis.dist\"), ...)  # S3 method for class 'sPLSda' predict(object, newdata, method = c(\"all\", \"max.dist\",          \"centroids.dist\", \"mahalanobis.dist\"), ...)  # S3 method for class 'gPLSda' predict(object, newdata, method = c(\"all\", \"max.dist\",          \"centroids.dist\", \"mahalanobis.dist\"), ...)  # S3 method for class 'sgPLSda' predict(object, newdata, method = c(\"all\", \"max.dist\",          \"centroids.dist\", \"mahalanobis.dist\"), ...)"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Method for PLS, sPLS, gPLS, sgPLS, sPLDda, gPLSda, sgPLSda — predict","text":"object object class inheriting \"PLS\", \"sPLS\", \"gPLS\", \"sgPLS\", \"PLSda\", \"sPLSda\", \"gPLSda\"  \"sgPLSda\". newdata data matrix look explanatory variables used prediction. method method applied \"PLSda\", sPLSda, gPLSda sgPLSda predict class new data,     subset \"centroids.dist\", \"mahalanobis.dist\" \"max.dist\" (see Details). \tDefaults \"\". ... used currently.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/predict.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict Method for PLS, sPLS, gPLS, sgPLS, sPLDda, gPLSda, sgPLSda — predict","text":"predict function pls spls object created Sebastien Dejean, Ignacio Gonzalez, Amrit Singh Kim-Anh Le Cao mixOmics package. Similar code used sPLS, gPLS, sgPLS, sPLSda, gPLSda, sgPLSda models performed sgPLS package. predict function produces predicted values, obtained evaluating sparse PLS, group PLS sparse group PLS model returned \"PLS\", sPLS, gPLS sgPLS frame newdata. Variates newdata also returned. prediction values calculated based regression coefficients object$Y onto object$variates$X. Different class prediction methods proposed \"PLSda\", sPLSda, gPLSda sgPLSda: \"max.dist\" naive method predict class. based predicted matrix (object$predict) can seen probability matrix assign test data class. class largest class value predicted class. \"centroids.dist\" allocates individual \\(x\\) class \\(Y\\) minimizing \\(dist(\\code{x-variate}, G_l)\\), \\(G_l\\), \\(l = 1,...,L\\) centroids classes calculated \\(X\\)-variates model. \"mahalanobis.dist\" allocates individual \\(x\\) class \\(Y\\) \"centroids.dist\" using Mahalanobis metric calculation distance.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Method for PLS, sPLS, gPLS, sgPLS, sPLDda, gPLSda, sgPLSda — predict","text":"predict produces list following components: predict three dimensional array predicted response values. dimensions \tcorrespond observations, response variables model dimension, respectively. variates Matrix predicted variates. B.hat Matrix regression coefficients (without intercept). class vector matrix predicted class using \\(1,...,\\)ncomp     (sparse)PLS-DA components. centroids matrix coordinates centroids.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/predict.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Predict Method for PLS, sPLS, gPLS, sgPLS, sPLDda, gPLSda, sgPLSda — predict","text":"Tenenhaus, M. (1998). La r\\'egression PLS: th\\'eorie et pratique. Paris: Editions Technic.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/predict.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predict Method for PLS, sPLS, gPLS, sgPLS, sPLDda, gPLSda, sgPLSda — predict","text":"Benoit Liquet Pierre Lafaye de Micheaux","code":""},{"path":[]},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/q2.PLS.html","id":null,"dir":"Reference","previous_headings":"","what":"PLS function performance assessment using Q2 indicator. — q2.PLS","title":"PLS function performance assessment using Q2 indicator. — q2.PLS","text":"q2.PLS function allows assess PLS models using \\(Q2\\) criterion. function returns list including \\(Q2\\) values number components. plot allows visualize model performance according number components.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/q2.PLS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PLS function performance assessment using Q2 indicator. — q2.PLS","text":"","code":"q2.PLS(object, ncomp = object$ncomp, mode = \"regression\", plot = TRUE)"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/q2.PLS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PLS function performance assessment using Q2 indicator. — q2.PLS","text":"object Object class inheriting \"pls\". ncomp number components desired q2 computing (number components computed model). mode Character string. type algorithm use, (partially) matching one \"regression\" \"canonical\". plot Boolean indicating plot must output ","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/q2.PLS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PLS function performance assessment using Q2 indicator. — q2.PLS","text":"suggestion number components selection also given Q2 criterion. Endly, indicators given PRESS RSS number components \\(PRESSj\\) \\(RSSj\\) (matrices) given number components given column Y dataset. plot = TRUE, plot displays curve Q2 values.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/q2.PLS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PLS function performance assessment using Q2 indicator. — q2.PLS","text":"\\(PRESSj\\) \\(RSSj\\) matrices size \\(ncomp\\) x \\(q\\). row sums \\(PRESSj\\) \\(RSSj\\) give respectively PRESS RSS.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/q2.PLS.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PLS function performance assessment using Q2 indicator. — q2.PLS","text":"K.-. Le Cao, Zoe Welham, Multivariate data integration using R (pages 172 174), MixOmics","code":""},{"path":[]},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/q2.PLS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PLS function performance assessment using Q2 indicator. — q2.PLS","text":"","code":"library(sgPLSdevelop)  d <- data.create(n = 50, p = 10, q = 2, list = TRUE) X <- d$X Y <- d$Y  ncomp.max <- 10 model <- PLS(X = X, Y = Y, ncomp = ncomp.max, mode = \"regression\")  par(mfrow = c(1,2)) q2.res <- q2.PLS(model, ncomp = ncomp.max, mode = \"regression\") h.best <- q2.res$h.best q2.PLS(model, ncomp = min(h.best+1, ncomp.max))$q2  #>      Comp1      Comp2      Comp3  #>  0.2877602  0.3566908 -0.8432656   # q2 values q2.res$q2 #>       Comp1       Comp2       Comp3       Comp4       Comp5       Comp6  #>   0.2877602   0.3566908  -0.8432656  -0.6030505  -2.9115572 -13.2699779  #>       Comp7       Comp8       Comp9      Comp10  #> -21.7981420 -28.0629094 -32.7021481 -36.4240638   # PRESS values q2.res$PRESS #>     Comp1     Comp2     Comp3     Comp4     Comp5     Comp6     Comp7     Comp8  #> 69.799501 33.970176 17.970201  8.015420  8.876622 10.222858 11.189770 12.420422  #>     Comp9    Comp10  #> 13.718211 15.170288   # RSS values #q2.res$RSS  # PRESS values by column q2.res$PRESSj #>               Y1        Y2 #> Comp1  59.142111 10.657390 #> Comp2  31.359444  2.610731 #> Comp3  15.892064  2.078137 #> Comp4   5.825136  2.190284 #> Comp5   6.205388  2.671234 #> Comp6   7.147939  3.074919 #> Comp7   7.913349  3.276421 #> Comp8   8.745916  3.674506 #> Comp9   9.558305  4.159907 #> Comp10 10.385866  4.784422  # RSS values by column #q2.res$RSSj"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sPLS.html","id":null,"dir":"Reference","previous_headings":"","what":"Sparse Partial Least Squares (sPLS) — sPLS","title":"Sparse Partial Least Squares (sPLS) — sPLS","text":"Function perform sparse Partial Least Squares (sPLS). sPLS approach combines integration variable selection simultaneously two data sets one-step strategy.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sPLS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sparse Partial Least Squares (sPLS) — sPLS","text":"","code":"sPLS(X, Y, ncomp, mode = \"regression\",      max.iter = 500, tol = 1e-06, keepX = rep(ncol(X), ncomp),       keepY = rep(ncol(Y), ncomp),scale=TRUE)"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sPLS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sparse Partial Least Squares (sPLS) — sPLS","text":"X Numeric matrix predictors. Y Numeric vector matrix responses (multi-response models). ncomp number components include model (see Details). mode Character string. type algorithm use, (partially) matching     one \"regression\" \"canonical\". See Details. max.iter Integer, maximum number iterations. tol positive real, tolerance used iterative algorithm. keepX Numeric vector length ncomp, number variables     keep \\(X\\)-loadings. default variables kept model. keepY Numeric vector length ncomp, number variables     keep \\(Y\\)-loadings. default variables kept model. scale logical indicating orignal data set need scaled. default scale=TRUE","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sPLS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sparse Partial Least Squares (sPLS) — sPLS","text":"sPLS function fit sPLS models \\(1, \\ldots ,\\)ncomp components. Multi-response models fully supported. type algorithm use specified mode argument. Two sPLS algorithms available: sPLS regression (\"regression\") sPLS canonical analysis (\"canonical\") (see References).","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sPLS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sparse Partial Least Squares (sPLS) — sPLS","text":"sPLS returns object class \"sPLS\", list contains following components:  X centered standardized original predictor matrix. Y centered standardized original response vector matrix. ncomp number components included model. mode algorithm used fit model. keepX Number \\(X\\) variables kept model component. keepY Number \\(Y\\) variables kept model component. mat.c Matrix coefficients used internally predict. variates List containing variates. loadings List containing estimated loadings \\(X\\) \t\\(Y\\) variates. names List containing names used individuals variables. tol tolerance used iterative algorithm, used subsequent S3 methods max.iter maximum number iterations, used subsequent S3 methods","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sPLS.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sparse Partial Least Squares (sPLS) — sPLS","text":"Liquet Benoit, Lafaye de Micheaux Pierre, Hejblum Boris, Thiebaut Rodolphe. group Sparse Group Partial Least Square approach applied Genomics context. Submitted. Le Cao, K.-., Martin, P.G.P., Robert-Grani\\', C. Besse, P. (2009). Sparse canonical methods biological data integration: application cross-platform study. BMC Bioinformatics 10:34. Le Cao, K.-., Rossouw, D., Robert-Grani\\'e, C. Besse, P. (2008). sparse PLS variable selection integrating Omics data. Statistical Applications Genetics Molecular Biology 7, article 35. Shen, H. Huang, J. Z. (2008). Sparse principal component analysis via regularized low rank matrix approximation. Journal Multivariate Analysis 99, 1015-1034. Tenenhaus, M. (1998). La r\\'egression PLS: th\\'eorie et pratique. Paris: Editions Technic. Wold H. (1966). Estimation principal components related models iterative least squares. : Krishnaiah, P. R. (editors), Multivariate Analysis. Academic Press, N.Y., 391-420.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sPLS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sparse Partial Least Squares (sPLS) — sPLS","text":"Benoit Liquet Pierre Lafaye de Micheaux.","code":""},{"path":[]},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sPLS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sparse Partial Least Squares (sPLS) — sPLS","text":"","code":"## Simulation of datasets X and Y with group variables n <- 100 sigma.gamma <- 1 sigma.e <- 1.5 p <- 400 q <- 500 theta.x1 <- c(rep(1, 15), rep(0, 5), rep(-1, 15), rep(0, 5),       rep(1.5, 15), rep(0, 5), rep(-1.5, 15), rep(0, 325)) theta.x2 <- c(rep(0, 320), rep(1, 15), rep(0, 5), rep(-1, 15),       rep(0, 5), rep(1.5, 15), rep(0, 5), rep(-1.5, 15),       rep(0, 5))  theta.y1 <- c(rep(1, 15), rep(0, 5), rep(-1, 15), rep(0, 5),        rep(1.5, 15), rep(0, 5), rep(-1.5, 15), rep(0, 425)) theta.y2 <- c(rep(0, 420), rep(1, 15), rep(0, 5), rep(-1, 15)       ,rep(0, 5), rep(1.5, 15), rep(0, 5), rep(-1.5, 15)       , rep(0, 5))                               Sigmax <- matrix(0, nrow = p, ncol = p) diag(Sigmax) <- sigma.e ^ 2 Sigmay <- matrix(0, nrow = q, ncol = q) diag(Sigmay) <- sigma.e ^ 2  set.seed(125)  gam1 <- rnorm(n) gam2 <- rnorm(n)  X <- matrix(c(gam1, gam2), ncol = 2, byrow = FALSE) %*% matrix(c(theta.x1, theta.x2),      nrow = 2, byrow = TRUE) + rmvnorm(n, mean = rep(0, p), sigma =      Sigmax, method = \"svd\") Y <- matrix(c(gam1, gam2), ncol = 2, byrow = FALSE) %*% matrix(c(theta.y1, theta.y2),      nrow = 2, byrow = TRUE) + rmvnorm(n, mean = rep(0, q), sigma =      Sigmay, method = \"svd\")   ind.block.x <- seq(20, 380, 20) ind.block.y <- seq(20, 480, 20)   #### sPLS model model.sPLS <- sPLS(X, Y, ncomp = 2, mode = \"regression\", keepX = c(60, 60),                       keepY = c(60, 60)) result.sPLS <- select.spls(model.sPLS) result.sPLS$select.X #> [[1]] #>  X1  X2  X3  X4  X5  X6  X7  X8  X9 X10 X11 X12 X13 X14 X15 X21 X22 X23 X24 X25  #>   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  21  22  23  24  25  #> X26 X27 X28 X29 X30 X31 X32 X33 X34 X35 X41 X42 X43 X44 X45 X46 X47 X48 X49 X50  #>  26  27  28  29  30  31  32  33  34  35  41  42  43  44  45  46  47  48  49  50  #> X51 X52 X53 X54 X55 X61 X62 X63 X64 X65 X66 X67 X68 X69 X70 X71 X72 X73 X74 X75  #>  51  52  53  54  55  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  #>  #> [[2]] #> X321 X322 X323 X324 X325 X326 X327 X328 X329 X330 X331 X332 X333 X334 X335 X341  #>  321  322  323  324  325  326  327  328  329  330  331  332  333  334  335  341  #> X342 X343 X344 X345 X346 X347 X348 X349 X350 X351 X352 X353 X354 X355 X361 X362  #>  342  343  344  345  346  347  348  349  350  351  352  353  354  355  361  362  #> X363 X364 X365 X366 X367 X368 X369 X370 X371 X372 X373 X374 X375 X381 X382 X383  #>  363  364  365  366  367  368  369  370  371  372  373  374  375  381  382  383  #> X384 X385 X386 X387 X388 X389 X390 X391 X392 X393 X394 X395  #>  384  385  386  387  388  389  390  391  392  393  394  395  #>  result.sPLS$select.Y #> [[1]] #>  Y1  Y2  Y3  Y4  Y5  Y6  Y7  Y8  Y9 Y10 Y11 Y12 Y13 Y14 Y15 Y21 Y22 Y23 Y24 Y25  #>   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  21  22  23  24  25  #> Y26 Y27 Y28 Y29 Y30 Y31 Y32 Y33 Y34 Y35 Y41 Y42 Y43 Y44 Y45 Y46 Y47 Y48 Y49 Y50  #>  26  27  28  29  30  31  32  33  34  35  41  42  43  44  45  46  47  48  49  50  #> Y51 Y52 Y53 Y54 Y55 Y61 Y62 Y63 Y64 Y65 Y66 Y67 Y68 Y69 Y70 Y71 Y72 Y73 Y74 Y75  #>  51  52  53  54  55  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  #>  #> [[2]] #> Y421 Y422 Y423 Y424 Y425 Y426 Y427 Y428 Y429 Y430 Y431 Y432 Y433 Y434 Y435 Y441  #>  421  422  423  424  425  426  427  428  429  430  431  432  433  434  435  441  #> Y442 Y443 Y444 Y445 Y446 Y447 Y448 Y449 Y450 Y451 Y452 Y453 Y454 Y455 Y461 Y462  #>  442  443  444  445  446  447  448  449  450  451  452  453  454  455  461  462  #> Y463 Y464 Y465 Y466 Y467 Y468 Y469 Y470 Y471 Y472 Y473 Y474 Y475 Y481 Y482 Y483  #>  463  464  465  466  467  468  469  470  471  472  473  474  475  481  482  483  #> Y484 Y485 Y486 Y487 Y488 Y489 Y490 Y491 Y492 Y493 Y494 Y495  #>  484  485  486  487  488  489  490  491  492  493  494  495  #>"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sPLSda.html","id":null,"dir":"Reference","previous_headings":"","what":"Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — sPLSda","title":"Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — sPLSda","text":"Function perform sparse Partial Least Squares classify samples (supervised analysis) select variables.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sPLSda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — sPLSda","text":"","code":"sPLSda(X, Y, ncomp = 2, keepX = rep(ncol(X), ncomp),        max.iter = 500, tol = 1e-06)"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sPLSda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — sPLSda","text":"X numeric matrix predictors. NAs allowed. Y factor class vector discrete outcome. ncomp number components include model (see Details). keepX numeric vector length ncomp, number variables     keep \\(X\\)-loadings. default variables kept model. max.iter integer, maximum number iterations. tol positive real, tolerance used iterative algorithm.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sPLSda.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — sPLSda","text":"sPLSda function fit sPLS models \\(1, \\ldots ,\\)ncomp components factor class vector Y. appropriate indicator (dummy) matrix created.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sPLSda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — sPLSda","text":"sPLSda returns object class \"sPLSda\", list contains following components:  X centered standardized original predictor matrix. Y centered standardized indicator response vector matrix. ind.mat indicator matrix. ncomp number components included model. keepX number \\(X\\) variables kept model component. mat.c matrix coefficients used internally predict. variates list containing variates. loadings list containing estimated loadings X \tY variates. names list containing names used individuals variables. tol tolerance used iterative algorithm, used subsequent S3 methods max.iter maximum number iterations, used subsequent S3 methods iter Number iterations algorthm component","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sPLSda.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — sPLSda","text":"sPLS-DA: Le Cao, K.-., Boitard, S. Besse, P. (2011). Sparse PLS Discriminant Analysis: biologically relevant feature selection graphical displays multiclass problems. BMC Bioinformatics 12:253.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sPLSda.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — sPLSda","text":"Benoit Liquet Pierre Lafaye de Micheaux.","code":""},{"path":[]},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sPLSda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — sPLSda","text":"","code":"### Examples from mixOmics packages     data(liver.toxicity) X <- as.matrix(liver.toxicity$gene) # Y will be transformed as a factor in the function, # but we set it as a factor to set up the colors. Y <- as.factor(liver.toxicity$treatment[, 4])  model <- sPLSda(X, Y, ncomp = 2, keepX = c(20, 20))"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/select.sgpls.html","id":null,"dir":"Reference","previous_headings":"","what":"Output of selected variables from a gPLS model or a sgPLS model — select.sgpls","title":"Output of selected variables from a gPLS model or a sgPLS model — select.sgpls","text":"function outputs selected variables component group sparse group PLS.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/select.sgpls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output of selected variables from a gPLS model or a sgPLS model — select.sgpls","text":"","code":"select.sgpls(model)"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/select.sgpls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Output of selected variables from a gPLS model or a sgPLS model — select.sgpls","text":"model object class inheriting  \"gPLS\" \"sgPLS\".","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/select.sgpls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Output of selected variables from a gPLS model or a sgPLS model — select.sgpls","text":"select.sgpls produces list following components: group.size.X matrix containing first column size groups \\(X\\) dataset. , next columns indicate size groups selected component. select.group.X list containing element (corresponding group \\(X\\) dataset) indices variables selected. group.size.Y matrix containing first column size groups \\(Y\\) dataset. next columns indicate size groups selected component. select.group.Y list containing element (corresponding group \\(Y\\) dataset) indices variables selected. select.X list containing element (corresponding component gPLS sgPLS model) names selected variables \\(X\\) dataset. select.Y list containing element (corresponding component gPLS sgPLS model) names selected variables \\(Y\\) dataset. select.X.total names variables selected gPLS sgPLS model regarding \\(X\\) matrix. select.Y.total names variables selected gPLS sgPLS model regarding \\(Y\\) matrix.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/select.sgpls.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Output of selected variables from a gPLS model or a sgPLS model — select.sgpls","text":"Benoit Liquet, b.liquet@uq.edu.au,  Pierre Lafaye de Micheaux lafaye@dms.umontreal.ca","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/select.sgpls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Output of selected variables from a gPLS model or a sgPLS model — select.sgpls","text":"","code":"if (FALSE) { # \\dontrun{   ## Simulation of datasets X and Y with group variables n <- 100 sigma.gamma <- 1 sigma.e <- 1.5 p <- 400 q <- 500 theta.x1 <- c(rep(1,15),rep(0,5),rep(-1,15),rep(0,5),rep(1.5,15)       ,rep(0,5),rep(-1.5,15),rep(0,325)) theta.x2 <- c(rep(0,320),rep(1,15),rep(0,5),rep(-1,15),rep(0,5),       rep(1.5,15),rep(0,5),rep(-1.5,15),rep(0,5))  theta.y1 <- c(rep(1,15),rep(0,5),rep(-1,15),rep(0,5),rep(1.5,15)       ,rep(0,5),rep(-1.5,15),rep(0,425)) theta.y2 <- c(rep(0,420),rep(1,15),rep(0,5),rep(-1,15),rep(0,5),       rep(1.5,15),rep(0,5),rep(-1.5,15),rep(0,5))                               Sigmax <- matrix(0, nrow = p, ncol = p) diag(Sigmax) <- sigma.e ^ 2 Sigmay <- matrix(0, nrow = q, ncol = q) diag(Sigmay) <- sigma.e ^ 2  set.seed(125)  gam1 <- rnorm(n) gam2 <- rnorm(n)  X <- matrix(c(gam1, gam2), ncol = 2, byrow = FALSE) %*% matrix(c(theta.x1, theta.x2),      nrow = 2, byrow = TRUE) + rmvnorm(n, mean = rep(0, p), sigma =      Sigmax, method = \"svd\") Y <- matrix(c(gam1, gam2), ncol = 2, byrow = FALSE) %*% matrix(c(theta.y1, theta.y2),      nrow = 2, byrow = TRUE) + rmvnorm(n, mean = rep(0, q), sigma =      Sigmay, method = \"svd\")  ind.block.x <- seq(20, 380, 20) ind.block.y <- seq(20, 480, 20)  #### gPLS model model.sgPLS <- sgPLS(X, Y, ncomp = 2, mode = \"regression\", keepX = c(4, 4),                     keepY = c(4, 4), ind.block.x = ind.block.x,                    ind.block.y = ind.block.y,                    alpha.x = c(0.5, 0.5), alpha.y = c(0.5, 0.5))  result.sgPLS <- select.sgpls(model.sgPLS) result.sgPLS$group.size.X result.sgPLS$group.size.Y  #### gPLS model model.gPLS <- gPLS(X, Y, ncomp = 2, mode = \"regression\", keepX = c(4, 4),       keepY = c(4,4), ind.block.x = ind.block.x ,ind.block.y = ind.block.y)  result.gPLS <- select.sgpls(model.gPLS) result.gPLS$group.size.X result.gPLS$group.size.Y    } # }"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/select.spls.html","id":null,"dir":"Reference","previous_headings":"","what":"Output of selected variables from a sPLS model — select.spls","title":"Output of selected variables from a sPLS model — select.spls","text":"function outputs selected variables component sPLS.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/select.spls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output of selected variables from a sPLS model — select.spls","text":"","code":"select.spls(model)"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/select.spls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Output of selected variables from a sPLS model — select.spls","text":"model object class inheriting \"sPLS\".","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/select.spls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Output of selected variables from a sPLS model — select.spls","text":"select.spls produces list following components: select.X list containing element (corresponding component sPLS model) names selected variables \\(X\\) dataset. select.Y list containing element (corresponding component sPLS model) names selected variables \\(Y\\) dataset. select.X.total names variables selected sPLS model regarding \\(X\\) matrix. select.Y.total names variables selected sPLS model regarding \\(Y\\) matrix.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/select.spls.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Output of selected variables from a sPLS model — select.spls","text":"Benoit Liquet, b.liquet@uq.edu.au,  Pierre Lafaye de Micheaux lafaye@dms.umontreal.ca","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/select.spls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Output of selected variables from a sPLS model — select.spls","text":"","code":"if (FALSE) { # \\dontrun{   ## Simulation of datasets X and Y with group variables n <- 100 sigma.gamma <- 1 sigma.e <- 1.5 p <- 400 q <- 500 theta.x1 <- c(rep(1,15),rep(0,5),rep(-1,15),rep(0,5),rep(1.5,15)              ,rep(0,5),rep(-1.5,15),rep(0,325)) theta.x2 <- c(rep(0,320),rep(1,15),rep(0,5),rep(-1,15),rep(0,5)              ,rep(1.5,15),rep(0,5),rep(-1.5,15),rep(0,5))  theta.y1 <- c(rep(1,15),rep(0,5),rep(-1,15),rep(0,5),rep(1.5,15)              ,rep(0,5),rep(-1.5,15),rep(0,425)) theta.y2 <- c(rep(0,420),rep(1,15),rep(0,5),rep(-1,15),rep(0,5),              rep(1.5,15),rep(0,5),rep(-1.5,15),rep(0,5))                               temp <-  matrix(c(theta.y1, theta.y2), nrow = 2, byrow = TRUE)  Sigmax <- matrix(0, nrow = p, ncol = p) diag(Sigmax) <- sigma.e ^ 2 Sigmay <- matrix(0, nrow = q, ncol = q) diag(Sigmay) <- sigma.e ^ 2  set.seed(125)  gam1 <- rnorm(n) gam2 <- rnorm(n)  X <- matrix(c(gam1, gam2), ncol = 2, byrow = FALSE) %*% matrix(c(theta.x1, theta.x2),      nrow = 2, byrow = TRUE) + rmvnorm(n, mean = rep(0, p), sigma =      Sigmax, method = \"svd\") Y <- matrix(c(gam1, gam2), ncol = 2, byrow = FALSE) %*% matrix(c(theta.y1, theta.y2),      nrow = 2, byrow = TRUE) + rmvnorm(n, mean = rep(0, q), sigma =      Sigmay, method = \"svd\")  ind.block.x <- seq(20, 380, 20) ind.block.y <- seq(20, 480, 20)  #### sPLS model model.sPLS <- sPLS(X, Y, ncomp = 2, mode = \"regression\", keepX = c(60, 60),                       keepY = c(60, 60)) result.sPLS <- select.spls(model.sPLS) result.sPLS$select.X result.sPLS$select.Y    } # }"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sgPLS-internal.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Functions — sgPLS-internal","title":"Internal Functions — sgPLS-internal","text":"Internal functions used user.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sgPLS-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Group and Sparse Group Partial Least Square Model — sgPLS-package","title":"Group and Sparse Group Partial Least Square Model — sgPLS-package","text":"sgPLS package provides sparse, group sparse group   version PLS approaches. \tmain functions :  sPLS sparse PLS, gPLS group PLS sgPLS sparse group PLS.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sgPLS-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Group and Sparse Group Partial Least Square Model — sgPLS-package","text":"Benoit Liquet <b.liquet@uq.edu.au>, Pierre Lafaye de Micheaux","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sgPLS-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Group and Sparse Group Partial Least Square Model — sgPLS-package","text":"Liquet Benoit, Lafaye de Micheaux Pierre, Hejblum Boris, Thiebaut Rodolphe. group Sparse Group Partial Least Square approach applied Genomics context. Submitted.","code":""},{"path":[]},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sgPLS.html","id":null,"dir":"Reference","previous_headings":"","what":"Sparse Group Partial Least Squares (sgPLS) — sgPLS","title":"Sparse Group Partial Least Squares (sgPLS) — sgPLS","text":"Function perform  sparse group Partial Least Squares (sgPLS) conext datasets divided groups variables. sgPLS approach enables selection groups single feature levels.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sgPLS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sparse Group Partial Least Squares (sgPLS) — sgPLS","text":"","code":"sgPLS(X, Y, ncomp, mode = \"regression\",      max.iter = 500, tol = 1e-06, keepX,       keepY = NULL,ind.block.x, ind.block.y = NULL, alpha.x, alpha.y = NULL,      upper.lambda = 10 ^ 5,scale=TRUE)"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sgPLS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sparse Group Partial Least Squares (sgPLS) — sgPLS","text":"X Numeric matrix predictors. Y Numeric vector matrix responses (multi-response models). ncomp number components include model (see Details). mode character string. type algorithm use, (partially) matching     one \"regression\" \"canonical\". See Details. max.iter Integer, maximum number iterations. tol positive real, tolerance used iterative algorithm. keepX Numeric vector length ncomp, number variables     keep \\(X\\)-loadings. default variables kept model. keepY Numeric vector length ncomp, number variables     keep \\(Y\\)-loadings. default variables kept model. ind.block.x vector integers describing grouping \\(X\\) variables. (see example Details section). ind.block.y vector integers describing grouping \\(Y\\) variables (see example Details section). alpha.x mixing parameter (value 0 1) related sparsity within group \\(X\\) dataset. alpha.y mixing parameter (value 0 1) related sparsity within group \\(Y\\) dataset. upper.lambda default upper.lambda=10 ^ 5. large value specifying upper bound intervall lambda values searching value tuning parameter (lambda) corresponding non-zero group variables. scale logical indicating orignal data set need scaled. default scale=TRUE","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sgPLS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sparse Group Partial Least Squares (sgPLS) — sgPLS","text":"sgPLS function fit gPLS models \\(1, \\ldots ,\\)ncomp components. Multi-response models fully supported. type algorithm use specified mode argument. Two gPLS algorithms available: gPLS regression (\"regression\") gPLS canonical analysis (\"canonical\") (see References). ind.block.x <- c(3, 10, 15) means \\(X\\) structured 4 groups: X1 X3; X4 X10, X11 X15 X16 X\\(p\\) \\(p\\) number variables \\(X\\) matrix.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sgPLS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sparse Group Partial Least Squares (sgPLS) — sgPLS","text":"sgPLS returns object class \"sgPLS\", list contains following components:  X centered standardized original predictor matrix. Y centered standardized original response vector matrix. ncomp number components included model. mode algorithm used fit model. keepX Number \\(X\\) variables kept model component. keepY Number \\(Y\\) variables kept model component. mat.c Matrix coefficients used internally predict. variates List containing variates. loadings List containing estimated loadings \\(X\\) \t\\(Y\\) variates. names List containing names used individuals variables. tol tolerance used iterative algorithm, used subsequent S3 methods. max.iter maximum number iterations, used subsequent S3 methods. iter Vector containing number iterations convergence component. ind.block.x vector integers describing grouping \\(X\\) variables. ind.block.y vector consecutive integers describing grouping \\(Y\\) variables. alpha.x mixing parameter related sparsity within group \\(X\\) dataset. alpha.y mixing parameter related sparsity within group \\(Y\\) dataset. upper.lambda upper bound intervall lambda values searching value tuning parameter (lambda) corresponding non-zero group variables.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sgPLS.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sparse Group Partial Least Squares (sgPLS) — sgPLS","text":"Liquet Benoit, Lafaye de Micheaux, Boris Hejblum, Rodolphe Thiebaut (2016). group Sparse Group Partial Least Square approach applied Genomics context. Bioinformatics. Le Cao, K.-., Martin, P.G.P., Robert-Grani\\'e, C. Besse, P. (2009). Sparse canonical methods biological data integration: application cross-platform study. BMC Bioinformatics 10:34. Le Cao, K.-., Rossouw, D., Robert-Grani\\'e, C. Besse, P. (2008). sparse PLS variable selection integrating Omics data. Statistical Applications Genetics Molecular Biology 7, article 35. Shen, H. Huang, J. Z. (2008). Sparse principal component analysis via regularized low rank matrix approximation. Journal Multivariate Analysis 99, 1015-1034. Tenenhaus, M. (1998). La r\\'egression PLS: th\\'eorie et pratique. Paris: Editions Technic. Wold H. (1966). Estimation principal components related models iterative least squares. : Krishnaiah, P. R. (editors), Multivariate Analysis. Academic Press, N.Y., 391-420.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sgPLS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sparse Group Partial Least Squares (sgPLS) — sgPLS","text":"Benoit Liquet Pierre Lafaye de Micheaux.","code":""},{"path":[]},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sgPLS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sparse Group Partial Least Squares (sgPLS) — sgPLS","text":"","code":"## Simulation of datasets X and Y with group variables n <- 100 sigma.gamma <- 1 sigma.e <- 1.5 p <- 400 q <- 500 theta.x1 <- c(rep(1,15),rep(0,5),rep(-1,15),rep(0,5),rep(1.5,15)              ,rep(0,5),rep(-1.5,15),rep(0,325)) theta.x2 <- c(rep(0,320),rep(1,15),rep(0,5),rep(-1,15),rep(0,5)              ,rep(1.5,15),rep(0,5),rep(-1.5,15),rep(0,5))  theta.y1 <- c(rep(1,15),rep(0,5),rep(-1,15),rep(0,5),rep(1.5,15)              ,rep(0,5),rep(-1.5,15),rep(0,425)) theta.y2 <- c(rep(0,420),rep(1,15),rep(0,5),rep(-1,15),rep(0,5),       rep(1.5,15),rep(0,5),rep(-1.5,15),rep(0,5))                                Sigmax <- matrix(0, nrow = p, ncol = p) diag(Sigmax) <- sigma.e ^ 2 Sigmay <- matrix(0, nrow = q, ncol = q) diag(Sigmay) <- sigma.e ^ 2  set.seed(125)  gam1 <- rnorm(n) gam2 <- rnorm(n)  X <- matrix(c(gam1, gam2), ncol = 2, byrow = FALSE) %*% matrix(c(theta.x1, theta.x2),      nrow = 2, byrow = TRUE) + rmvnorm(n, mean = rep(0, p), sigma =      Sigmax, method = \"svd\") Y <- matrix(c(gam1, gam2), ncol = 2, byrow = FALSE) %*% matrix(c(theta.y1, theta.y2),      nrow = 2, byrow = TRUE) + rmvnorm(n, mean = rep(0, q), sigma =      Sigmay, method = \"svd\")   ind.block.x <- seq(20, 380, 20) ind.block.y <- seq(20, 480, 20) ##   model.sgPLS <- sgPLS(X, Y, ncomp = 2, mode = \"regression\", keepX = c(4, 4),                     keepY = c(4, 4), ind.block.x = ind.block.x                    ,ind.block.y = ind.block.y,                    alpha.x = c(0.95, 0.95), alpha.y = c(0.95, 0.95))  result.sgPLS <- select.sgpls(model.sgPLS) result.sgPLS$group.size.X #>    size comp1 comp2 #> 1    20    15     0 #> 2    20    15     0 #> 3    20    16     0 #> 4    20    15     0 #> 5    20     0     0 #> 6    20     0     0 #> 7    20     0     0 #> 8    20     0     0 #> 9    20     0     0 #> 10   20     0     0 #> 11   20     0     0 #> 12   20     0     0 #> 13   20     0     0 #> 14   20     0     0 #> 15   20     0     0 #> 16   20     0     0 #> 17   20     0    15 #> 18   20     0    15 #> 19   20     0    16 #> 20   20     0    15 result.sgPLS$group.size.Y #>    size comp1 comp2 #> 1    20    15     0 #> 2    20    15     0 #> 3    20    16     0 #> 4    20    16     0 #> 5    20     0     0 #> 6    20     0     0 #> 7    20     0     0 #> 8    20     0     0 #> 9    20     0     0 #> 10   20     0     0 #> 11   20     0     0 #> 12   20     0     0 #> 13   20     0     0 #> 14   20     0     0 #> 15   20     0     0 #> 16   20     0     0 #> 17   20     0     0 #> 18   20     0     0 #> 19   20     0     0 #> 20   20     0     0 #> 21   20     0     0 #> 22   20     0    15 #> 23   20     0    15 #> 24   20     0    15 #> 25   20     0    15"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sgPLSda.html","id":null,"dir":"Reference","previous_headings":"","what":"Sparse Group Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — sgPLSda","title":"Sparse Group Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — sgPLSda","text":"Function perform sparse group Partial Least Squares classify samples (supervised analysis) select variables.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sgPLSda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sparse Group Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — sgPLSda","text":"","code":"sgPLSda(X, Y, ncomp = 2, keepX = rep(ncol(X), ncomp),        max.iter = 500, tol = 1e-06, ind.block.x,      alpha.x, upper.lambda = 10 ^ 5)"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sgPLSda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sparse Group Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — sgPLSda","text":"X numeric matrix predictors. NAs allowed. Y factor class vector discrete outcome. ncomp number components include model (see Details). keepX numeric vector length ncomp, number variables     keep \\(X\\)-loadings. default variables kept model. max.iter integer, maximum number iterations. tol positive real, tolerance used iterative algorithm. ind.block.x vector integers describing grouping \\(X\\)-variables. (see example Details section) alpha.x mixing parameter (value 0 1) related sparsity within group \\(X\\) dataset. upper.lambda default upper.lambda=10 ^ 5. large value specifying upper bound intervall lambda values searching value tuning parameter (lambda) corresponding non-zero group variables.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sgPLSda.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sparse Group Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — sgPLSda","text":"sgPLSda function fit sgPLS models \\(1, \\ldots ,\\)ncomp components factor class vector Y. appropriate indicator (dummy) matrix created. ind.block.x <- c(3,10,15) means \\(X\\) structured 4 groups: X1 X3; X4 X10, X11 X15 X16 X\\(p\\) \\(p\\) number variables \\(X\\) matrix.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sgPLSda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sparse Group Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — sgPLSda","text":"sPLSda returns object class \"sPLSda\", list contains following components:  X centered standardized original predictor matrix. Y centered standardized indicator response vector matrix. ind.mat indicator matrix. ncomp number components included model. keepX number \\(X\\) variables kept model component. mat.c matrix coefficients used internally predict. variates list containing variates. loadings list containing estimated loadings X \tY variates. names list containing names used individuals variables. tol tolerance used iterative algorithm, used subsequent S3 methods max.iter maximum number iterations, used subsequent S3 methods iter Number iterations algorthm component ind.block.x vector integers describing grouping X variables. alpha.x mixing parameter related sparsity within group \\(X\\) dataset. upper.lambda upper bound intervall lambda values searching value tuning parameter (lambda) corresponding non-zero group variables.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sgPLSda.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sparse Group Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — sgPLSda","text":"Liquet Benoit, Lafaye de Micheaux Pierre , Hejblum Boris, Thiebaut Rodolphe (2016). group Sparse Group Partial Least Square approach applied Genomics context. Bioinformatics. sPLS-DA: Le Cao, K.-., Boitard, S. Besse, P. (2011). Sparse PLS Discriminant Analysis: biologically relevant feature selection graphical displays multiclass problems. BMC Bioinformatics 12:253.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sgPLSda.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sparse Group Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — sgPLSda","text":"Benoit Liquet Pierre Lafaye de Micheaux.","code":""},{"path":[]},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/sgPLSda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sparse Group Sparse Partial Least Squares Discriminant Analysis (sPLS-DA) — sgPLSda","text":"","code":"data(simuData) X <- simuData$X Y <- simuData$Y ind.block.x <- seq(100, 900, 100) ind.block.x[2] <- 250 #To add some noise in the second group model <- sgPLSda(X, Y, ncomp = 3,ind.block.x=ind.block.x, keepX = c(2, 2, 2) , alpha.x = c(0.5,0.5,0.99)) result.sgPLSda <- select.sgpls(model) result.sgPLSda$group.size.X #>    size comp1 comp2 comp3 #> 1   100     0   100     0 #> 2   150     0     0   101 #> 3    50     0     0     0 #> 4   100   100     0     0 #> 5   100     0     0     0 #> 6   100     0   100     0 #> 7   100     0     0   100 #> 8   100     0     0     0 #> 9   100   100     0     0 #> 10  100     0     0     0 ##perf(model,criterion=\"all\",validation=\"loo\") -> res ##res$error.rate"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/simuData.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated Data for group PLS-DA model — simuData","title":"Simulated Data for group PLS-DA model — simuData","text":"simulated data set contains expression 1000 genes 4 clusters 48 different individuals.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/simuData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated Data for group PLS-DA model — simuData","text":"","code":"data(simuData)"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/simuData.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated Data for group PLS-DA model — simuData","text":"list containing following components: X data matrix 48 rows 1000 columns. row represents       experimental sample, column single gene. Y factor variable indicating cluster subject","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/simuData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulated Data for group PLS-DA model — simuData","text":"data simulated 6 groups 100 genes linked 4 clusters. others 4 groups 100 genes added represent noise. relevant groups group 1,2,4,6,7 9. groups 3,5,8, 10 noise groups.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.gPLS.X.html","id":null,"dir":"Reference","previous_headings":"","what":"Choice of the tuning parameter (number of groups) related to predictor matrix for gPLS model (regression mode) — tuning.gPLS.X","title":"Choice of the tuning parameter (number of groups) related to predictor matrix for gPLS model (regression mode) — tuning.gPLS.X","text":"grid tuning parameter, function computes leave-one-M-fold cross-validation MSEP (Mean Square Error Prediction) gPLS model.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.gPLS.X.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choice of the tuning parameter (number of groups) related to predictor matrix for gPLS model (regression mode) — tuning.gPLS.X","text":"","code":"tuning.gPLS.X(X,Y,folds=10,validation=c(\"Mfold\",\"loo\"),     ncomp,keepX=NULL,grid.X,setseed,progressBar=FALSE,     ind.block.x=ind.block.x)"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.gPLS.X.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choice of the tuning parameter (number of groups) related to predictor matrix for gPLS model (regression mode) — tuning.gPLS.X","text":"X Numeric matrix data frame \\((n \\times p)\\), observations \\(X\\) variables. Y Numeric matrix data frame \\((n \\times q)\\), observations \\(Y\\) variables. folds Positive integer. Number folds use validation=\"Mfold\". Defaults folds=10. validation Character string. kind (internal) cross-validation method use, (partially) matching one \"Mfolds\" (M-folds) \"loo\" (leave-one-). ncomp Number component investigating choice tuning parameter. keepX Vector integer indicating number group variables keep component. See details information. grid.X Vector integers defining values tuning parameter (corresponding number group variables select) cross-validation score computed. setseed Integer indicating random number generation state. progressBar default set FALSE output progress bar computation. ind.block.x vector integers describing grouping X variables. (see example details section)","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.gPLS.X.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Choice of the tuning parameter (number of groups) related to predictor matrix for gPLS model (regression mode) — tuning.gPLS.X","text":"validation=\"Mfolds\", M-fold cross-validation performed calling Mfold. folds generated. number cross-validation folds specified argument folds. validation=\"loo\", leave-one-cross-validation performed calling loo function. case arguments folds ignored. keepX specified (default NULL), element keepX indicates value tuning parameter corresponding component. choice tuning parameters corresponding remaining components investigating evaluating cross-validation score different values defining grid.X.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.gPLS.X.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choice of the tuning parameter (number of groups) related to predictor matrix for gPLS model (regression mode) — tuning.gPLS.X","text":"returned value list components: MSEP Matrix containing cross-validation score computed grid. keepX Value tuning parameter (lambda)     cross-validation method reached minimum.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.gPLS.X.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Choice of the tuning parameter (number of groups) related to predictor matrix for gPLS model (regression mode) — tuning.gPLS.X","text":"Benoit Liquet Pierre Lafaye de Micheaux","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.gPLS.X.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Choice of the tuning parameter (number of groups) related to predictor matrix for gPLS model (regression mode) — tuning.gPLS.X","text":"","code":"if (FALSE) { # \\dontrun{   ## Simulation of Datasets X (with group variables) and Y a multivariate response variable  n <- 200 sigma.e <- 0.5 p <- 400 q <- 10 theta.x1 <- c(rep(1,15),rep(0,5),rep(-1,15),rep(0,5),rep(1.5,15),       rep(0,5),rep(-1.5,15),rep(0,325)) theta.x2 <- c(rep(0,320),rep(1,15),rep(0,5),rep(-1,15),rep(0,5),       rep(1.5,15),rep(0,5),rep(-1.5,15),rep(0,5))  set.seed(125) theta.y1 <- runif(10,0.5,2) theta.y2 <- runif(10,0.5,2)    temp <-  matrix(c(theta.y1,theta.y2),nrow=2,byrow=TRUE)  Sigmax <- matrix(0,nrow=p,ncol=p) diag(Sigmax) <- sigma.e^2 Sigmay <- matrix(0,nrow=q,ncol=q) diag(Sigmay) <- sigma.e^2  gam1 <- rnorm(n,0,1) gam2 <- rnorm(n,0,1)  X <- matrix(c(gam1,gam2),ncol=2,byrow=FALSE)%*%matrix(c(theta.x1,theta.x2),nrow=2,byrow=TRUE) +rmvnorm(n,mean=rep(0,p),sigma=Sigmax,method=\"svd\") Y <- matrix(c(gam1,gam2),ncol=2,byrow=FALSE)%*%t(svd(temp)$v) +rmvnorm(n,mean=rep(0,q),sigma=Sigmay,method=\"svd\")  ind.block.x <- seq(20,380,20)  grid.X <- 1:16  ## Strategy with same value for both components tun.gPLS <- tuning.gPLS.X(X, Y, folds = 10, validation = c(\"Mfold\", \"loo\"),      ncomp=2,keepX = NULL, grid.X=grid.X, setseed=1, progressBar = FALSE,      ind.block.x = ind.block.x)   tun.gPLS$keepX # for each component  ##For a sequential strategy tun.gPLS.1 <- tuning.gPLS.X(X, Y, folds = 10, validation = c(\"Mfold\", \"loo\"),        ncomp=1, keepX = NULL, grid.X=grid.X, setseed=1,                              ind.block.x = ind.block.x)  tun.gPLS.1$keepX # for the first component  tun.gPLS.2 <- tuning.gPLS.X(X, Y, folds = 10, validation = c(\"Mfold\", \"loo\"), ncomp=2,                              keepX = tun.gPLS.1$keepX , grid.X=grid.X, setseed=1,                              ind.block.x = ind.block.x)   tun.gPLS.2$keepX # for the second component } # }"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.sPLS.X.html","id":null,"dir":"Reference","previous_headings":"","what":"Choice of the tuning parameter (number of variables) related to predictor matrix for sPLS model (regression mode) — tuning.sPLS.X","title":"Choice of the tuning parameter (number of variables) related to predictor matrix for sPLS model (regression mode) — tuning.sPLS.X","text":"grid tuning parameter, function computes leave-one-M-fold cross-validation MSEP (Mean Square Error Prediction) sPLS model.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.sPLS.X.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choice of the tuning parameter (number of variables) related to predictor matrix for sPLS model (regression mode) — tuning.sPLS.X","text":"","code":"tuning.sPLS.X(X, Y, folds = 10, validation = c(\"Mfold\", \"loo\"), ncomp,     keepX = NULL, grid.X, setseed, progressBar = FALSE)"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.sPLS.X.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choice of the tuning parameter (number of variables) related to predictor matrix for sPLS model (regression mode) — tuning.sPLS.X","text":"X Numeric matrix data frame \\((n \\times p)\\), observations \\(X\\) variables. Y Numeric matrix data frame \\((n \\times q)\\), observations \\(Y\\) variables. folds Positive integer. Number folds use validation=\"Mfold\". Defaults folds=10. validation Character string. kind (internal) cross-validation method use, (partially) matching one \"Mfolds\" (M-folds) \"loo\" (leave-one-). ncomp Number component investigating choice tuning parameter. keepX Vector integer indicating number variables keep component. See Details information. grid.X Vector integers defining values tuning parameter (corresponding number variables select) cross-validation score computed. setseed Integer indicating random number generation state. progressBar default set FALSE output progress bar computation.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.sPLS.X.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Choice of the tuning parameter (number of variables) related to predictor matrix for sPLS model (regression mode) — tuning.sPLS.X","text":"validation=\"Mfolds\", M-fold cross-validation performed calling Mfold. folds generated. number cross-validation folds specified argument folds. validation=\"loo\", leave-one-cross-validation performed calling loo function. case arguments folds ignored. keepX specified (default NULL), element keepX indicates value tuning parameter corresponding component. choice tuning parameters corresponding remaining components investigating evaluating cross-validation score different values defining grid.X.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.sPLS.X.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choice of the tuning parameter (number of variables) related to predictor matrix for sPLS model (regression mode) — tuning.sPLS.X","text":"returned value list components: MSEP Vector containing cross-validation score computed grid keepX Value tuning parameter     cross-validation method reached minimum.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.sPLS.X.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Choice of the tuning parameter (number of variables) related to predictor matrix for sPLS model (regression mode) — tuning.sPLS.X","text":"Benoit Liquet Pierre Lafaye de Micheaux","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.sPLS.X.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Choice of the tuning parameter (number of variables) related to predictor matrix for sPLS model (regression mode) — tuning.sPLS.X","text":"","code":"if (FALSE) { # \\dontrun{   ## Simulation of Datasets X (with group variables) and Y a multivariate response variable  n <- 200 sigma.e <- 0.5 p <- 400 q <- 10 theta.x1 <- c(rep(1, 15), rep(0, 5), rep(-1, 15), rep(0, 5), rep(1.5, 15),       rep(0, 5), rep(-1.5, 15), rep(0, 325)) theta.x2 <- c(rep(0, 320), rep(1, 15), rep(0, 5), rep(-1, 15), rep(0, 5),       rep(1.5, 15), rep(0, 5), rep(-1.5, 15), rep(0, 5))  set.seed(125) theta.y1 <- runif(10, 0.5, 2) theta.y2 <- runif(10, 0.5, 2)    temp <-  matrix(c(theta.y1, theta.y2), nrow = 2, byrow = TRUE)  Sigmax <- matrix(0, nrow = p, ncol = p) diag(Sigmax) <- sigma.e ^ 2 Sigmay <- matrix(0, nrow = q, ncol = q) diag(Sigmay) <- sigma.e ^ 2  gam1 <- rnorm(n) gam2 <- rnorm(n)  X <- matrix(c(gam1, gam2), ncol = 2, byrow = FALSE) %*% matrix(c(theta.x1, theta.x2),      nrow = 2, byrow = TRUE) + rmvnorm(n, mean = rep(0, p), sigma =      Sigmax, method = \"svd\") Y <- matrix(c(gam1, gam2), ncol = 2, byrow = FALSE) %*% t(svd(temp)$v)      + rmvnorm(n, mean = rep(0, q), sigma = Sigmay, method = \"svd\")   grid.X <- c(20, 30, 40, 50, 60, 70, 80, 90, 100, 120, 150, 200, 250, 300)  ## Strategy with same value for both components tun.sPLS <- tuning.sPLS.X(X, Y, folds = 10, validation = c(\"Mfold\", \"loo\"),      ncomp = 2, keepX = NULL, grid.X = grid.X, setseed = 1) tun.sPLS$keepX # for each component  ##For a sequential strategy tun.sPLS.1 <- tuning.sPLS.X(X, Y, folds = 10, validation = c(\"Mfold\", \"loo\"),      ncomp = 1, keepX = NULL, grid.X = grid.X, setseed = 1)  tun.sPLS.1$keepX # for the first component  tun.sPLS.2 <- tuning.sPLS.X(X, Y, folds = 10, validation = c(\"Mfold\", \"loo\"),      ncomp = 2, keepX = tun.sPLS.1$keepX , grid.X = grid.X, setseed = 1) tun.sPLS.2$keepX # for the second component  } # }"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.sPLS.XY.html","id":null,"dir":"Reference","previous_headings":"","what":"Tuning of the parameters for sPLS models — tuning.sPLS.XY","title":"Tuning of the parameters for sPLS models — tuning.sPLS.XY","text":"function calculate best number components best number variables select sPLS models.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.sPLS.XY.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tuning of the parameters for sPLS models — tuning.sPLS.XY","text":"","code":"tuning.sPLS.XY(X,Y,folds=10,validation=c(\"Mfold\",\"loo\"), ncomp = ncol(X), progressBar = FALSE)"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.sPLS.XY.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tuning of the parameters for sPLS models — tuning.sPLS.XY","text":"X centered standardized original predictor matrix. Y centered standardized original response vector matrix. validation Character. kind (internal) validation use, matching one \"Mfold\" \"loo\". Default \"Mfold\". folds folds Mfold cross-validation. ncomp number components progressBar default set TRUE output progress bar computation.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.sPLS.XY.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tuning of the parameters for sPLS models — tuning.sPLS.XY","text":"function outputs best tuning parameters using MSEP criterion. also two MSEP plots : one shows MSEP according number components shows MSEP according number selected variables X Y. Particularly, multivariate sPLS (q>1), \"plot\" table MSEP values ; best (minimum) value MSEP colored red.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.sPLS.XY.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tuning of the parameters for sPLS models — tuning.sPLS.XY","text":"MSEP.h Vector MSEP values according number components h.best Index minimum value MSEP.h MSEP.q.p Matrix MSEP values according number X selected variables (column) number Y selected variables (row) keepX.best vector best number X selected variables repeated h.best times keepY.best vector best number Y selected variables repeated h.best times","code":""},{"path":[]},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.sPLS.XY.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tuning of the parameters for sPLS models — tuning.sPLS.XY","text":"Daniel FLORES","code":""},{"path":[]},{"path":[]},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.sPLS.XY.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tuning of the parameters for sPLS models — tuning.sPLS.XY","text":"","code":"library(sgPLSdevelop)  # number of components ncomp.max <- 8  # dataset data <- data.create(p = 10, list = TRUE)  # model X <- data$X Y <- data$Y  # tuning perf.res <- tuning.sPLS.XY(X,Y,ncomp = ncomp.max)"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.sgPLS.X.html","id":null,"dir":"Reference","previous_headings":"","what":"Choice of the tuning parameters (number of groups and mixing parameter) related to predictor matrix for sgPLS model (regression mode) — tuning.sgPLS.X","title":"Choice of the tuning parameters (number of groups and mixing parameter) related to predictor matrix for sgPLS model (regression mode) — tuning.sgPLS.X","text":"grid two dimension tuning parameters, function computes leave-one-M-fold cross-validation MSEP (Mean Square Error Prediction) sgPLS model.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.sgPLS.X.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choice of the tuning parameters (number of groups and mixing parameter) related to predictor matrix for sgPLS model (regression mode) — tuning.sgPLS.X","text":"","code":"tuning.sgPLS.X(X, Y, folds = 10, validation = c(\"Mfold\", \"loo\"), ncomp,         keepX = NULL, alpha.x = NULL, grid.gX, grid.alpha.X,         setseed, progressBar = FALSE, ind.block.x = ind.block.x,         upper.lambda = 10 ^ 9)"},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.sgPLS.X.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choice of the tuning parameters (number of groups and mixing parameter) related to predictor matrix for sgPLS model (regression mode) — tuning.sgPLS.X","text":"X Numeric matrix data frame \\((n \\times p)\\), observations \\(X\\) variables. Y Numeric matrix data frame \\((n \\times q)\\), observations \\(Y\\) variables. folds Positive integer. Number folds use validation=\"Mfold\". Defaults     folds=10. validation Character string. kind (internal) cross-validation method use,     (partially) matching one \"Mfolds\" (M-folds) \"loo\" (leave-one-). ncomp Number component investigating choice tuning parameter. keepX Vector integer indicating number group variables keep component. See Details information. alpha.x Numeric vector indicating number group variables keep component. See Details information. grid.gX,grid.alpha.X Vector numeric defining values   tuning parameter lambda (number groups select) tuning   parameter alpha (mixing paramter values 0 1) cross-validation score computed setseed Integer indicating random number generation state. progressBar default set FALSE output progress bar computation. ind.block.x vector integers describing grouping X variables. (see example Details section). upper.lambda default upper.lambda=10 ^ 9. large value specifying upper bound intervall lambda values searching value tuning parameter (lambda) corresponding non-zero group variables.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.sgPLS.X.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Choice of the tuning parameters (number of groups and mixing parameter) related to predictor matrix for sgPLS model (regression mode) — tuning.sgPLS.X","text":"validation = \"Mfolds\", M-fold cross-validation performed calling Mfold. folds generated. number cross-validation folds specified argument folds. validation = \"loo\", leave-one-cross-validation performed calling loo function. case arguments folds ignored. keepX specified (default NULL), element keepX indicates value tuning parameter corresponding component. choice tuning parameters corresponding remaining components investigating evaluating cross-validation score different values defining grid.X. alpha.x specified (default NULL), element alpha.x indicates value tuning parameter (alpha) corresponding component. choice tuning parameters corresponding remaining components investigating evaluating cross-vlidation score different values defining grid.alpha.X.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.sgPLS.X.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choice of the tuning parameters (number of groups and mixing parameter) related to predictor matrix for sgPLS model (regression mode) — tuning.sgPLS.X","text":"returned value list components: MSEP vector containing cross-validation score computed grid keepX value tuning parameter     cross-validation method reached minimum. alphaX value tuning parameter (alpha)     cross-validation method reached minimum.","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.sgPLS.X.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Choice of the tuning parameters (number of groups and mixing parameter) related to predictor matrix for sgPLS model (regression mode) — tuning.sgPLS.X","text":"Benoit Liquet Pierre Lafaye de Micheaux","code":""},{"path":"https://daniel-stage.github.io/sgPLS_develop/reference/tuning.sgPLS.X.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Choice of the tuning parameters (number of groups and mixing parameter) related to predictor matrix for sgPLS model (regression mode) — tuning.sgPLS.X","text":"","code":"if (FALSE) { # \\dontrun{   ## Simulation of datasets X (with group variables) and Y a multivariate response variable  n <- 200 sigma.e <- 0.5 p <- 400 q <- 10 theta.x1 <- c(rep(1, 15), rep(0, 5), rep(-1, 15), rep(0, 5), rep(1.5, 15),       rep(0, 5), rep(-1.5, 15), rep(0, 325)) theta.x2 <- c(rep(0, 320), rep(1, 15), rep(0, 5), rep(-1, 15), rep(0, 5),       rep(1.5, 15), rep(0, 5), rep(-1.5, 15), rep(0, 5))  set.seed(125) theta.y1 <- runif(10, 0.5, 2) theta.y2 <- runif(10, 0.5, 2)    temp <-  matrix(c(theta.y1, theta.y2), nrow = 2, byrow = TRUE)  Sigmax <- matrix(0, nrow = p, ncol = p) diag(Sigmax) <- sigma.e ^ 2 Sigmay <- matrix(0, nrow = q, ncol = q) diag(Sigmay) <- sigma.e ^ 2  gam1 <- rnorm(n) gam2 <- rnorm(n)  X <- matrix(c(gam1, gam2), ncol = 2, byrow = FALSE) %*% matrix(c(theta.x1, theta.x2),      nrow = 2, byrow = TRUE) + rmvnorm(n, mean = rep(0, p), sigma =      Sigmax, method = \"svd\") Y <- matrix(c(gam1, gam2), ncol = 2, byrow = FALSE) %*% t(svd(temp)$v)       + rmvnorm(n, mean = rep(0, q), sigma = Sigmay, method = \"svd\")  ind.block.x <- seq(20, 380, 20)  grid.X <- 2:16 grid.alpha.X <- c(0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.8, 0.95) ## Strategy with same value of each tuning parameter for both components tun.sgPLS <- tuning.sgPLS.X(X, Y, folds = 10, validation = c(\"Mfold\", \"loo\"),          ncomp = 2,keepX = NULL, alpha.x = NULL,grid.gX = grid.X,          grid.alpha.X = grid.alpha.X, setseed = 1, progressBar = FALSE,          ind.block.x = ind.block.x)   tun.sgPLS$keepX # for each component tun.sgPLS$alphaX # for each component ##For a sequential strategy tun.sgPLS.1 <- tuning.sgPLS.X(X, Y, folds = 10, validation = c(\"Mfold\", \"loo\"),                ncomp = 1, keepX = NULL,  alpha.x = NULL, grid.gX = grid.X,          grid.alpha.X = grid.alpha.X, setseed = 1,           ind.block.x = ind.block.x)              tun.sgPLS.1$keepX # for the first component tun.sgPLS.1$alphaX # for the first component  tun.sgPLS.2 <- tuning.sgPLS.X(X, Y, folds = 10, validation = c(\"Mfold\", \"loo\"),            ncomp = 2, keepX = tun.sgPLS.1$keepX,           alpha.x = tun.sgPLS.1$alphaX,           grid.gX = grid.X,           grid.alpha.X = grid.alpha.X,           setseed = 1,           ind.block.x = ind.block.x)   tun.sgPLS.2$keepX # for the second component tun.sgPLS.2$alphaX # for the second component } # }"}]
